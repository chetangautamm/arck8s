  node {
    
    def registry = "chetangautamm/repo"
    def registryCredential = '58881f31-29bb-48a8-9da9-fc254654146d'
    def dockerImage = ""

    def SITE1_HOSTNAME = "20.193.238.113"
    def SITE1_USERNAME = "kubeadm"
    def SITE1_PASSWORD = "kubeadm@1234"

    def SITE2_HOSTNAME = "3.111.41.173"
    def SITE2_USERNAME = "ubuntu"
    def SITE2_PASSWORD = "ubuntu"

    stage('Checkout Source Code') {
        checkout([$class: 'GitSCM', branches: [[name: '*/master']], extensions: [], userRemoteConfigs: [[credentialsId: '0280c339-f1a8-48bc-b303-3ec7a661b546', url: 'https://github.com/chetangautamm/arck8s.git']]])
    }

// TO demonstrate real edge scenario credentials needs to be added before the execution.
   stage("Azure Cli:${SITE1_USERNAME}(AZURE)"){
       sshagent(['${SITE1_USERNAME}']){
         script{
           try{
             sh "sshpass -p ${SITE1_PASSWORD} ssh -o StrictHostKeyChecking=no ${SITE1_USERNAME}@${SITE1_HOSTNAME} curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash"
           }catch(error){
             sh "sshpass -p ${SITE1_PASSWORD} ssh -o StrictHostKeyChecking=no ${SITE1_USERNAME}@${SITE1_HOSTNAME} curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash"
           }
         }
      }
   }

   stage("Azure Cli:ubuntu(AWS)"){
       sshagent(['ubuntu']){
         script{
           try{
             sh "sshpass -p ${SITE2_PASSWORD} ssh -o StrictHostKeyChecking=no ${SITE2_USERNAME}@${SITE2_HOSTNAME} curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash"
           }catch(error){
             sh "sshpass -p ${SITE2_PASSWORD} ssh -o StrictHostKeyChecking=no ${SITE2_USERNAME}@${SITE2_HOSTNAME} curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash"
           }
         }
       }
     }

   stage("Connectedk8s Extension:${SITE1_USERNAME}(AZURE)"){
       sshagent(['${SITE1_USERNAME}']){
         script{
           try{
             sh "sshpass -p ${SITE1_PASSWORD} ssh -o StrictHostKeyChecking=no ${SITE1_USERNAME}@${SITE1_HOSTNAME} az extension add --name connectedk8s"
           }catch(error){
             sh "sshpass -p ${SITE1_PASSWORD} ssh -o StrictHostKeyChecking=no ${SITE1_USERNAME}@${SITE1_HOSTNAME} az extension add --name connectedk8s"
           }
         }
       }
     }

   stage("Connectedk8s Extension:ubuntu(AWS)"){
       sshagent(['ubuntu']){
         script{
           try{
             sh "sshpass -p ${SITE2_PASSWORD} ssh -o StrictHostKeyChecking=no ${SITE2_USERNAME}@${SITE2_HOSTNAME} az extension add --name connectedk8s"
           }catch(error){
             sh "sshpass -p ${SITE2_PASSWORD} ssh -o StrictHostKeyChecking=no ${SITE2_USERNAME}@${SITE2_HOSTNAME} az extension add --name connectedk8s"
           }
         }
       }
     }

   stage("Register Arc Providers:${SITE1_USERNAME}(AZURE)"){
       sshagent(['${SITE1_USERNAME}']){
         script{
           try{
             sh "sshpass -p ${SITE1_PASSWORD} ssh -o StrictHostKeyChecking=no ${SITE1_USERNAME}@${SITE1_HOSTNAME} az provider register --namespace Microsoft.Kubernetes"
             sh "sshpass -p ${SITE1_PASSWORD} ssh -o StrictHostKeyChecking=no ${SITE1_USERNAME}@${SITE1_HOSTNAME} az provider register --namespace Microsoft.KubernetesConfiguration"
             sh "sshpass -p ${SITE1_PASSWORD} ssh -o StrictHostKeyChecking=no ${SITE1_USERNAME}@${SITE1_HOSTNAME} az provider register --namespace Microsoft.ExtendedLocation"
           }catch(error){
             sh "sshpass -p ${SITE1_PASSWORD} ssh -o StrictHostKeyChecking=no ${SITE1_USERNAME}@${SITE1_HOSTNAME} az provider register --namespace Microsoft.Kubernetes"
             sh "sshpass -p ${SITE1_PASSWORD} ssh -o StrictHostKeyChecking=no ${SITE1_USERNAME}@${SITE1_HOSTNAME} az provider register --namespace Microsoft.KubernetesConfiguration"
             sh "sshpass -p ${SITE1_PASSWORD} ssh -o StrictHostKeyChecking=no ${SITE1_USERNAME}@${SITE1_HOSTNAME} az provider register --namespace Microsoft.ExtendedLocation"
           }
         }
       }
     }

   stage("Register Arc Providers:ubuntu(AWS)"){
       sshagent(['ubuntu']){
         script{
           try{
             sh "sshpass -p ${SITE2_PASSWORD} ssh -o StrictHostKeyChecking=no ${SITE2_USERNAME}@${SITE2_HOSTNAME} az provider register --namespace Microsoft.Kubernetes"
             sh "sshpass -p ${SITE2_PASSWORD} ssh -o StrictHostKeyChecking=no ${SITE2_USERNAME}@${SITE2_HOSTNAME} az provider register --namespace Microsoft.KubernetesConfiguration"
             sh "sshpass -p ${SITE2_PASSWORD} ssh -o StrictHostKeyChecking=no ${SITE2_USERNAME}@${SITE2_HOSTNAME} az provider register --namespace Microsoft.ExtendedLocation"
           }catch(error){
             sh "sshpass -p ${SITE2_PASSWORD} ssh -o StrictHostKeyChecking=no ${SITE2_USERNAME}@${SITE2_HOSTNAME} az provider register --namespace Microsoft.Kubernetes"
             sh "sshpass -p ${SITE2_PASSWORD} ssh -o StrictHostKeyChecking=no ${SITE2_USERNAME}@${SITE2_HOSTNAME} az provider register --namespace Microsoft.KubernetesConfiguration"
             sh "sshpass -p ${SITE2_PASSWORD} ssh -o StrictHostKeyChecking=no ${SITE2_USERNAME}@${SITE2_HOSTNAME} az provider register --namespace Microsoft.ExtendedLocation"
           }
         }
       }
     }

   stage("Verify Arc Providers:${SITE1_USERNAME}(AZURE)"){
       sshagent(['${SITE1_USERNAME}']){
         script{
           try{
             sh "sshpass -p ${SITE1_PASSWORD} ssh -o StrictHostKeyChecking=no ${SITE1_USERNAME}@${SITE1_HOSTNAME} az provider show -n Microsoft.Kubernetes -o table"
             sh "sshpass -p ${SITE1_PASSWORD} ssh -o StrictHostKeyChecking=no ${SITE1_USERNAME}@${SITE1_HOSTNAME} az provider show -n Microsoft.KubernetesConfiguration -o table"
             sh "sshpass -p ${SITE1_PASSWORD} ssh -o StrictHostKeyChecking=no ${SITE1_USERNAME}@${SITE1_HOSTNAME} az provider show -n Microsoft.ExtendedLocation -o table"
           }catch(error){
             sh "sshpass -p ${SITE1_PASSWORD} ssh -o StrictHostKeyChecking=no ${SITE1_USERNAME}@${SITE1_HOSTNAME} az provider show -n Microsoft.Kubernetes -o table"
             sh "sshpass -p ${SITE1_PASSWORD} ssh -o StrictHostKeyChecking=no ${SITE1_USERNAME}@${SITE1_HOSTNAME} az provider show -n Microsoft.KubernetesConfiguration -o table"
             sh "sshpass -p ${SITE1_PASSWORD} ssh -o StrictHostKeyChecking=no ${SITE1_USERNAME}@${SITE1_HOSTNAME} az provider show -n Microsoft.ExtendedLocation -o table"
           }
         }
       }
     }

   stage("Verify Arc Providers:ubuntu(AWS)"){
       sshagent(['ubuntu']){
         script{
           try{
             sh "sshpass -p ${SITE2_PASSWORD} ssh -o StrictHostKeyChecking=no ${SITE2_USERNAME}@${SITE2_HOSTNAME} az provider show -n Microsoft.Kubernetes -o table"
             sh "sshpass -p ${SITE2_PASSWORD} ssh -o StrictHostKeyChecking=no ${SITE2_USERNAME}@${SITE2_HOSTNAME} az provider show -n Microsoft.KubernetesConfiguration -o table"
             sh "sshpass -p ${SITE2_PASSWORD} ssh -o StrictHostKeyChecking=no ${SITE2_USERNAME}@${SITE2_HOSTNAME} az provider show -n Microsoft.ExtendedLocation -o table"
           }catch(error){
             sh "sshpass -p ${SITE2_PASSWORD} ssh -o StrictHostKeyChecking=no ${SITE2_USERNAME}@${SITE2_HOSTNAME} az provider show -n Microsoft.Kubernetes -o table"
             sh "sshpass -p ${SITE2_PASSWORD} ssh -o StrictHostKeyChecking=no ${SITE2_USERNAME}@${SITE2_HOSTNAME} az provider show -n Microsoft.KubernetesConfiguration -o table"
             sh "sshpass -p ${SITE2_PASSWORD} ssh -o StrictHostKeyChecking=no ${SITE2_USERNAME}@${SITE2_HOSTNAME} az provider show -n Microsoft.ExtendedLocation -o table"
           }
         }
       }
     }

   stage("Create Resource Group:${SITE1_USERNAME}(AZURE)"){
       sshagent(['${SITE1_USERNAME}']){
         script{
           try{
             sh "sshpass -p ${SITE1_PASSWORD} ssh -o StrictHostKeyChecking=no ${SITE1_USERNAME}@${SITE1_HOSTNAME} az group create --name ${SITE1_USERNAME}_azure --location EastUS --output table"
           }catch(error){
             sh "sshpass -p ${SITE1_PASSWORD} ssh -o StrictHostKeyChecking=no ${SITE1_USERNAME}@${SITE1_HOSTNAME} az group create --name ${SITE1_USERNAME}_azure --location EastUS --output table"
           }
         }
       }
     }

   stage("Create Resource Group:ubuntu(AWS)"){
       sshagent(['ubuntu']){
         script{
           try{
             sh "sshpass -p ${SITE2_PASSWORD} ssh -o StrictHostKeyChecking=no ${SITE2_USERNAME}@${SITE2_HOSTNAME} az group create --name ubuntu_aws --location EastUS --output table"
           }catch(error){
             sh "sshpass -p ${SITE2_PASSWORD} ssh -o StrictHostKeyChecking=no ${SITE2_USERNAME}@${SITE2_HOSTNAME} az group create --name ubuntu_aws --location EastUS --output table"
           }
         }
       }
     }

   stage("Connect Existing K8s:${SITE1_USERNAME}(AZURE)"){
       sshagent(['${SITE1_USERNAME}']){
         script{
           try{
             sh "sshpass -p ${SITE1_PASSWORD} ssh -o StrictHostKeyChecking=no ${SITE1_USERNAME}@${SITE1_HOSTNAME} az connectedk8s connect --name Edge_Site-1 --resource-group ${SITE1_USERNAME}_azure"
           }catch(error){
             sh "sshpass -p ${SITE1_PASSWORD} ssh -o StrictHostKeyChecking=no ${SITE1_USERNAME}@${SITE1_HOSTNAME} az connectedk8s connect --name Edge_Site-1 --resource-group ${SITE1_USERNAME}_azure"
           }
         }
       }
     }

   stage("Connect Existing K8s:ubuntu(AWS)"){
       sshagent(['ubuntu']){
         script{
           try{
             sh "sshpass -p ${SITE2_PASSWORD} ssh -o StrictHostKeyChecking=no ${SITE2_USERNAME}@${SITE2_HOSTNAME} az connectedk8s connect --name Edge_Site-2 --resource-group ubuntu_aws"
           }catch(error){
             sh "sshpass -p ${SITE2_PASSWORD} ssh -o StrictHostKeyChecking=no ${SITE2_USERNAME}@${SITE2_HOSTNAME} az connectedk8s connect --name Edge_Site-2 --resource-group ubuntu_aws"
           }
         }
       }
     }

   stage("Service Account Token Authentication:${SITE1_USERNAME}(AZURE)"){
       sh "chmod +x token.sh"
       sshagent(['${SITE1_USERNAME}']){
         sh "scp -o StrictHostKeyChecking=no -q token.sh ${SITE1_USERNAME}@${SITE1_HOSTNAME}:/home/${SITE1_USERNAME}/"
         script{
           try{
             sh "sshpass -p ${SITE1_PASSWORD} ssh -o StrictHostKeyChecking=no kubeadm@${SITE1_HOSTNAME} ./token.sh"
           }catch(error){
             sh "sshpass -p ${SITE1_PASSWORD} ssh -o StrictHostKeyChecking=no ${SITE1_USERNAME}@${SITE1_HOSTNAME} ./token.sh"
           }
         }
       }
     }

   stage("Service Account Token Authentication:ubuntu(AWS)"){
       sh "chmod +x token.sh"
       sshagent(['ubuntu']){
         sh "scp -o StrictHostKeyChecking=no -q token.sh ${SITE2_USERNAME}@${SITE2_HOSTNAME}:/home/${SITE2_USERNAME}/"
         script{
           try{
             sh "sshpass -p ${SITE2_PASSWORD} ssh -o StrictHostKeyChecking=no ${SITE2_USERNAME}@${SITE2_HOSTNAME} ./token.sh"
           }catch(error){
             sh "sshpass -p ${SITE2_PASSWORD} ssh -o StrictHostKeyChecking=no ${SITE2_USERNAME}@${SITE2_HOSTNAME} ./token.sh"
           }
         }
       }
     }

   stage('Deploy Opensips:${SITE1_USERNAME}(AZURE) ') {
        sshagent(['${SITE1_USERNAME}']) {
          script {
            try {
              sh "sshpass -p ${SITE1_PASSWORD} scp -o StrictHostKeyChecking=no -q opensips.yaml ${SITE1_USERNAME}@${SITE1_HOSTNAME}:/home/${SITE1_USERNAME}/"
              sh "sleep 2"
              sh "sshpass -p ${SITE1_PASSWORD} ssh -o StrictHostKeyChecking=no ${SITE1_USERNAME}@${SITE1_HOSTNAME} kubectl apply -f opensips.yaml"
            }catch(error){
              sh "sshpass -p ${SITE1_PASSWORD} scp -o StrictHostKeyChecking=no -q opensips.yaml ${SITE1_USERNAME}@${SITE1_HOSTNAME}:/home/${SITE1_USERNAME}/"
              sh "sleep 2"
              sh "sshpass -p ${SITE1_PASSWORD} ssh -o StrictHostKeyChecking=no ${SITE1_USERNAME}@${SITE1_HOSTNAME} kubectl apply -f opensips.yaml"
            }
          }
        }
      }
    stage('Validate Opensips:${SITE1_USERNAME}(AZURE)') {
        sh "chmod +x configure.sh"
        sshagent(['${SITE1_USERNAME}']) {
          sh "sshpass -p ${SITE1_PASSWORD} scp -o StrictHostKeyChecking=no -q configure.sh ${SITE1_USERNAME}@${SITE1_HOSTNAME}:/home/${SITE1_USERNAME}"
          script {
            sh "sleep 20"
            sh "sshpass -p ${SITE1_PASSWORD} ssh -o StrictHostKeyChecking=no ${SITE1_USERNAME}@${SITE1_HOSTNAME} ./configure.sh"
          }
        }
      }
   stage('Deploy Opensips:ubuntu(AWS)') {
        sshagent(['ubuntu']) {
          script {
            try {
              sh "sshpass -p ${SITE2_PASSWORD} scp -o StrictHostKeyChecking=no -q opensips.yaml ${SITE2_USERNAME}@${SITE2_HOSTNAME}:/home/${SITE2_USERNAME}/"
              sh "sleep 2"
              sh "sshpass -p ${SITE2_PASSWORD} ssh -o StrictHostKeyChecking=no ${SITE2_USERNAME}@${SITE2_HOSTNAME} kubectl apply -f opensips.yaml"
            }catch(error){
              sh "sshpass -p ${SITE2_PASSWORD} scp -o StrictHostKeyChecking=no -q opensips.yaml ${SITE2_USERNAME}@${SITE2_HOSTNAME}:/home/${SITE2_USERNAME}/"
              sh "sleep 2"
              sh "sshpass -p ${SITE2_PASSWORD} ssh -o StrictHostKeyChecking=no ${SITE2_USERNAME}@${SITE2_HOSTNAME} kubectl apply -f opensips.yaml"
            }
          }
        }
      }

   stage('Validate Opensips:ubuntu(AWS)') {
        sh "chmod +x configure.sh"
        sshagent(['ubuntu']) {
          sh "sshpass -p ${SITE2_PASSWORD} scp -o StrictHostKeyChecking=no -q configure.sh ${SITE2_USERNAME}@${SITE2_HOSTNAME}:/home/${SITE2_USERNAME}"
          script {
            sh "sleep 30"
            sh "sshpass -p ${SITE2_PASSWORD} ssh -o StrictHostKeyChecking=no ${SITE2_USERNAME}@${SITE2_HOSTNAME} ./configure.sh"
          }
        }
      }
    }
