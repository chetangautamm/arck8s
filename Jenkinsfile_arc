pipeline {

  environment {
    registry = "chetangautamm/repo"
    registryCredential = '58881f31-29bb-48a8-9da9-fc254654146d'
    dockerImage = ""

    SITE1_HOSTNAME = "20.193.238.113"
    SITE1_USERNAME = "kubeadm"
    SITE1_PASSWORD = "kubeadm@1234"

    SITE2_HOSTNAME = "3.108.55.91"
    SITE2_USERNAME = "ubuntu"
    SITE2_PASSWORD = "ubuntu"


  }

  agent any

  stages {

    stage('Checkout Source Code') {
      steps {
        git 'https://github.com/chetangautamm/arck8s.git'
      }
    }

// TO demonstrate real edge scenario credentials needs to be added before the execution.
   stage("Azure Cli:SITE1_USERNAME(AZURE)"){
     steps{
       sshagent(['kubeadm']){
         script{
           try{
             sh "ssh SITE1_USERNAME@SITE1_HOSTNAME curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash"
           }catch(error){
             sh "ssh SITE1_USERNAME@SITE1_HOSTNAME curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash"
           }
         }
       }
     }
   }

   stage("Azure Cli:KIND(AWS)"){
     steps{
       sshagent(['ubuntu']){
         script{
           try{
             sh "ssh SITE2_USERNAME@SITE2_HOSTNAME curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash"
           }catch(error){
             sh "ssh SITE2_USERNAME@SITE2_HOSTNAME curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash"
           }
         }
       }
     }
   }

   stage("Connectedk8s Extension:SITE1_USERNAME(AZURE)"){
     steps{
       sshagent(['kubeadm']){
         script{
           try{
             sh "ssh SITE1_USERNAME@SITE1_HOSTNAME az extension add --name connectedk8s"
           }catch(error){
             sh "ssh SITE1_USERNAME@SITE1_HOSTNAME az extension add --name connectedk8s"
           }
         }
       }
     }
   }

   stage("Connectedk8s Extension:KIND(AWS)"){
     steps{
       sshagent(['ubuntu']){
         script{
           try{
             sh "ssh SITE2_USERNAME@SITE2_HOSTNAME az extension add --name connectedk8s"
           }catch(error){
             sh "ssh SITE2_USERNAME@SITE2_HOSTNAME az extension add --name connectedk8s"
           }
         }
       }
     }
   }

   stage("Register Arc Providers:SITE1_USERNAME(AZURE)"){
     steps{
       sshagent(['kubeadm']){
         script{
           try{
             sh "ssh SITE1_USERNAME@SITE1_HOSTNAME az provider register --namespace Microsoft.Kubernetes"
             sh "ssh SITE1_USERNAME@SITE1_HOSTNAME az provider register --namespace Microsoft.KubernetesConfiguration"
             sh "ssh SITE1_USERNAME@SITE1_HOSTNAME az provider register --namespace Microsoft.ExtendedLocation"
           }catch(error){
             sh "ssh SITE1_USERNAME@SITE1_HOSTNAME az provider register --namespace Microsoft.Kubernetes"
             sh "ssh SITE1_USERNAME@SITE1_HOSTNAME az provider register --namespace Microsoft.KubernetesConfiguration"
             sh "ssh SITE1_USERNAME@SITE1_HOSTNAME az provider register --namespace Microsoft.ExtendedLocation"
           }
         }
       }
     }
   }

   stage("Register Arc Providers:KIND(AWS)"){
     steps{
       sshagent(['ubuntu']){
         script{
           try{
             sh "ssh SITE2_USERNAME@SITE2_HOSTNAME az provider register --namespace Microsoft.Kubernetes"
             sh "ssh SITE2_USERNAME@SITE2_HOSTNAME az provider register --namespace Microsoft.KubernetesConfiguration"
             sh "ssh SITE2_USERNAME@SITE2_HOSTNAME az provider register --namespace Microsoft.ExtendedLocation"
           }catch(error){
             sh "ssh SITE2_USERNAME@SITE2_HOSTNAME az provider register --namespace Microsoft.Kubernetes"
             sh "ssh SITE2_USERNAME@SITE2_HOSTNAME az provider register --namespace Microsoft.KubernetesConfiguration"
             sh "ssh SITE2_USERNAME@SITE2_HOSTNAME az provider register --namespace Microsoft.ExtendedLocation"
           }
         }
       }
     }
   }

   stage("Verify Arc Providers:SITE1_USERNAME(AZURE)"){
     steps{
       sshagent(['kubeadm']){
         script{
           try{
             sh "ssh SITE1_USERNAME@SITE1_HOSTNAME az provider show -n Microsoft.Kubernetes -o table"
             sh "ssh SITE1_USERNAME@SITE1_HOSTNAME az provider show -n Microsoft.KubernetesConfiguration -o table"
             sh "ssh SITE1_USERNAME@SITE1_HOSTNAME az provider show -n Microsoft.ExtendedLocation -o table"
           }catch(error){
             sh "ssh SITE1_USERNAME@SITE1_HOSTNAME az provider show -n Microsoft.Kubernetes -o table"
             sh "ssh SITE1_USERNAME@SITE1_HOSTNAME az provider show -n Microsoft.KubernetesConfiguration -o table"
             sh "ssh SITE1_USERNAME@SITE1_HOSTNAME az provider show -n Microsoft.ExtendedLocation -o table"
           }
         }
       }
     }
   }

   stage("Verify Arc Providers:KIND(AWS)"){
     steps{
       sshagent(['ubuntu']){
         script{
           try{
             sh "ssh SITE2_USERNAME@SITE2_HOSTNAME az provider show -n Microsoft.Kubernetes -o table"
             sh "ssh SITE2_USERNAME@SITE2_HOSTNAME az provider show -n Microsoft.KubernetesConfiguration -o table"
             sh "ssh SITE2_USERNAME@SITE2_HOSTNAME az provider show -n Microsoft.ExtendedLocation -o table"
           }catch(error){
             sh "ssh SITE2_USERNAME@SITE2_HOSTNAME az provider show -n Microsoft.Kubernetes -o table"
             sh "ssh SITE2_USERNAME@SITE2_HOSTNAME az provider show -n Microsoft.KubernetesConfiguration -o table"
             sh "ssh SITE2_USERNAME@SITE2_HOSTNAME az provider show -n Microsoft.ExtendedLocation -o table"
           }
         }
       }
     }
   }

   stage("Create Resource Group:SITE1_USERNAME(AZURE)"){
     steps{
       sshagent(['kubeadm']){
         script{
           try{
             sh "ssh SITE1_USERNAME@SITE1_HOSTNAME az group create --name SITE1_USERNAME_azure --location EastUS --output table"
           }catch(error){
             sh "ssh SITE1_USERNAME@SITE1_HOSTNAME az group create --name SITE1_USERNAME_azure --location EastUS --output table"
           }
         }
       }
     }
   }

   stage("Create Resource Group:KIND(AWS)"){
     steps{
       sshagent(['ubuntu']){
         script{
           try{
             sh "ssh SITE2_USERNAME@SITE2_HOSTNAME az group create --name kind_aws --location EastUS --output table"
           }catch(error){
             sh "ssh SITE2_USERNAME@SITE2_HOSTNAME az group create --name kind_aws --location EastUS --output table"
           }
         }
       }
     }
   }

   stage("Connect Existing K8s:SITE1_USERNAME(AZURE)"){
     steps{
       sshagent(['kubeadm']){
         script{
           try{
             sh "ssh SITE1_USERNAME@SITE1_HOSTNAME az connectedk8s connect --name Edge_Site-1 --resource-group SITE1_USERNAME_azure"
           }catch(error){
             sh "ssh SITE1_USERNAME@SITE1_HOSTNAME az connectedk8s connect --name Edge_Site-1 --resource-group SITE1_USERNAME_azure"
           }
         }
       }
     }
   }

   stage("Connect Existing K8s:KIND(AWS)"){
     steps{
       sshagent(['ubuntu']){
         script{
           try{
             sh "ssh SITE2_USERNAME@SITE2_HOSTNAME az connectedk8s connect --name Edge_Site-2 --resource-group kind_aws"
           }catch(error){
             sh "ssh SITE2_USERNAME@SITE2_HOSTNAME az connectedk8s connect --name Edge_Site-2 --resource-group kind_aws"
           }
         }
       }
     }
   }

   stage("Service Account Token Authentication:SITE1_USERNAME(AZURE)"){
     steps{
       sh "chmod +x token.sh"
       sshagent(['kubeadm']){
         sh "scp -o StrictHostKeyChecking=no -q token.sh SITE1_USERNAME@SITE1_HOSTNAME:/home/SITE1_USERNAME/"
         script{
           try{
             sh "ssh kubeadm@SITE1_HOSTNAME ./token.sh"
           }catch(error){
             sh "ssh SITE1_USERNAME@SITE1_HOSTNAME ./token.sh"
           }
         }
       }
     }
   }

   stage("Service Account Token Authentication:KIND(AWS)"){
     steps{
       sh "chmod +x token.sh"
       sshagent(['ubuntu']){
         sh "scp -o StrictHostKeyChecking=no -q token.sh SITE2_USERNAME@SITE2_HOSTNAME:/home/SITE2_USERNAME/"
         script{
           try{
             sh "ssh SITE2_USERNAME@SITE2_HOSTNAME ./token.sh"
           }catch(error){
             sh "ssh SITE2_USERNAME@SITE2_HOSTNAME ./token.sh"
           }
         }
       }
     }
   }

   stage('Deploy Opensips:SITE1_USERNAME(AZURE) ') {
      steps {
        sshagent(['kubeadm']) {
          script {
            try {
              sh "scp -o StrictHostKeyChecking=no -q opensips.yaml SITE1_USERNAME@SITE1_HOSTNAME:/home/SITE1_USERNAME/"
              sh "sleep 2"
              sh "ssh SITE1_USERNAME@SITE1_HOSTNAME kubectl apply -f opensips.yaml"
            }catch(error){
              sh "scp -o StrictHostKeyChecking=no -q opensips.yaml SITE1_USERNAME@SITE1_HOSTNAME:/home/SITE1_USERNAME/"
              sh "sleep 2"
              sh "ssh SITE1_USERNAME@SITE1_HOSTNAME kubectl apply -f opensips.yaml"
            }
          }
        }
      }
    }
    stage('Validate Opensips:SITE1_USERNAME(AZURE)') {
      steps {
        sh "chmod +x configure.sh"
        sshagent(['kubeadm']) {
          sh "scp -o StrictHostKeyChecking=no -q configure.sh SITE1_USERNAME@SITE1_HOSTNAME:/home/SITE1_USERNAME"
          script {
            sh "sleep 20"
            sh "ssh kubeadm@SITE1_HOSTNAME ./configure.sh"
          }
        }
      }
    }
   stage('Deploy Opensips:KIND(AWS)') {
      steps {
        sshagent(['ubuntu']) {
          script {
            try {
              sh "scp -o StrictHostKeyChecking=no -q opensips.yaml SITE2_USERNAME@SITE2_HOSTNAME:/home/SITE2_USERNAME/"
              sh "sleep 2"
              sh "ssh SITE2_USERNAME@SITE2_HOSTNAME kubectl apply -f opensips.yaml"
            }catch(error){
              sh "scp -o StrictHostKeyChecking=no -q opensips.yaml SITE2_USERNAME@SITE2_HOSTNAME:/home/SITE2_USERNAME/"
              sh "sleep 2"
              sh "ssh SITE2_USERNAME@SITE2_HOSTNAME kubectl apply -f opensips.yaml"
            }
          }
        }
      }
    }

   stage('Validate Opensips:KIND(AWS)') {
      steps {
        sh "chmod +x configure.sh"
        sshagent(['ubuntu']) {
          sh "scp -o StrictHostKeyChecking=no -q configure.sh SITE2_USERNAME@SITE2_HOSTNAME:/home/SITE2_USERNAME"
          script {
            sh "sleep 30"
            sh "ssh SITE2_USERNAME@SITE2_HOSTNAME ./configure.sh"
          }
        }
      }
    }
  }
}
