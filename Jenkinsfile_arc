pipeline {

  environment {
    registry = "chetangautamm/repo"
    registryCredential = '58881f31-29bb-48a8-9da9-fc254654146d'
    dockerImage = ""
  }

  agent any

  stages {

    stage('Checkout Source Code') {
      steps {
        git 'https://github.com/chetangautamm/arck8s.git'
      }
    }
   stage("Azure Cli:KUBEADM(AZURE)"){
     steps{
       sshagent(['kubeadm']){
         script{
           try{
             sh "ssh kubeadm@20.193.238.113 curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash"
           }catch(error){
             sh "ssh kubeadm@20.193.238.113 curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash"
           }
         }
       }
     }
   }

   stage("Azure Cli:KIND(AWS)"){
     steps{
       sshagent(['kind']){
         script{
           try{
             sh "ssh ubuntu@3.111.23.250 curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash"
           }catch(error){
             sh "ssh ubuntu@3.111.23.250 curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash"
           }
         }
       }
     }
   }

   stage("Connectedk8s Extension:KUBEADM(AZURE)"){
     steps{
       sshagent(['kubeadm']){
         script{
           try{
             sh "ssh kubeadm@20.193.238.113 az extension add --name connectedk8s"
           }catch(error){
             sh "ssh kubeadm@20.193.238.113 az extension add --name connectedk8s"
           }
         }
       }
     }
   }

   stage("Connectedk8s Extension:KIND(AWS)"){
     steps{
       sshagent(['kind']){
         script{
           try{
             sh "ssh ubuntu@3.111.23.250 az extension add --name connectedk8s"
           }catch(error){
             sh "ssh ubuntu@3.111.23.250 az extension add --name connectedk8s"
           }
         }
       }
     }
   }

   stage("Register Arc Providers:KUBEADM(AZURE)"){
     steps{
       sshagent(['kubeadm']){
         script{
           try{
             sh "ssh kubeadm@20.193.238.113 az provider register --namespace Microsoft.Kubernetes"
             sh "ssh kubeadm@20.193.238.113 az provider register --namespace Microsoft.KubernetesConfiguration"
             sh "ssh kubeadm@20.193.238.113 az provider register --namespace Microsoft.ExtendedLocation"
           }catch(error){
             sh "ssh kubeadm@20.193.238.113 az provider register --namespace Microsoft.Kubernetes"
             sh "ssh kubeadm@20.193.238.113 az provider register --namespace Microsoft.KubernetesConfiguration"
             sh "ssh kubeadm@20.193.238.113 az provider register --namespace Microsoft.ExtendedLocation"
           }
         }
       }
     }
   }

   stage("Register Arc Providers:KIND(AWS)"){
     steps{
       sshagent(['kind']){
         script{
           try{
             sh "ssh ubuntu@3.111.23.250 az provider register --namespace Microsoft.Kubernetes"
             sh "ssh ubuntu@3.111.23.250 az provider register --namespace Microsoft.KubernetesConfiguration"
             sh "ssh ubuntu@3.111.23.250 az provider register --namespace Microsoft.ExtendedLocation"
           }catch(error){
             sh "ssh ubuntu@3.111.23.250 az provider register --namespace Microsoft.Kubernetes"
             sh "ssh ubuntu@3.111.23.250 az provider register --namespace Microsoft.KubernetesConfiguration"
             sh "ssh ubuntu@3.111.23.250 az provider register --namespace Microsoft.ExtendedLocation"
           }
         }
       }
     }
   }

   stage("Verify Arc Providers:KUBEADM(AZURE)"){
     steps{
       sshagent(['kubeadm']){
         script{
           try{
             sh "ssh kubeadm@20.193.238.113 az provider show -n Microsoft.Kubernetes -o table"
             sh "ssh kubeadm@20.193.238.113 az provider show -n Microsoft.KubernetesConfiguration -o table"
             sh "ssh kubeadm@20.193.238.113 az provider show -n Microsoft.ExtendedLocation -o table"
           }catch(error){
             sh "ssh kubeadm@20.193.238.113 az provider show -n Microsoft.Kubernetes -o table"
             sh "ssh kubeadm@20.193.238.113 az provider show -n Microsoft.KubernetesConfiguration -o table"
             sh "ssh kubeadm@20.193.238.113 az provider show -n Microsoft.ExtendedLocation -o table"
           }
         }
       }
     }
   }

   stage("Verify Arc Providers:KIND(AWS)"){
     steps{
       sshagent(['kind']){
         script{
           try{
             sh "ssh ubuntu@3.111.23.250 az provider show -n Microsoft.Kubernetes -o table"
             sh "ssh ubuntu@3.111.23.250 az provider show -n Microsoft.KubernetesConfiguration -o table"
             sh "ssh ubuntu@3.111.23.250 az provider show -n Microsoft.ExtendedLocation -o table"
           }catch(error){
             sh "ssh ubuntu@3.111.23.250 az provider show -n Microsoft.Kubernetes -o table"
             sh "ssh ubuntu@3.111.23.250 az provider show -n Microsoft.KubernetesConfiguration -o table"
             sh "ssh ubuntu@3.111.23.250 az provider show -n Microsoft.ExtendedLocation -o table"
           }
         }
       }
     }
   }

   stage("Create Resource Group:KUBEADM(AZURE)"){
     steps{
       sshagent(['kubeadm']){
         script{
           try{
             sh "ssh kubeadm@20.193.238.113 az group create --name kubeadm(azure) --location EastUS --output table"
           }catch(error){
             sh "ssh kubeadm@20.193.238.113 az group create --name kubeadm(azure) --location EastUS --output table"
           }
         }
       }
     }
   }

   stage("Create Resource Group:KIND(AWS)"){
     steps{
       sshagent(['kind']){
         script{
           try{
             sh "ssh ubuntu@3.111.23.250 az group create --name kind(aws) --location EastUS --output table"
           }catch(error){
             sh "ssh ubuntu@3.111.23.250 az group create --name kind(aws) --location EastUS --output table"
           }
         }
       }
     }
   }

   stage("Connect Existing K8s:KUBEADM(AZURE)"){
     steps{
       sshagent(['kubeadm']){
         script{
           try{
             sh "ssh kubeadm@20.193.238.113 az connectedk8s connect --name Edge_Site-1 --resource-group kubeadm(azure)"
           }catch(error){
             sh "ssh kubeadm@20.193.238.113 az connectedk8s connect --name Edge_Site-1 --resource-group kubeadm(azure)"
           }
         }
       }
     }
   }

   stage("Connect Existing K8s:KIND(AWS)"){
     steps{
       sshagent(['kind']){
         script{
           try{
             sh "ssh ubuntu@3.111.23.250 az connectedk8s connect --name Edge_Site-2 --resource-group kind(aws)"
           }catch(error){
             sh "ssh ubuntu@3.111.23.250 az connectedk8s connect --name Edge_Site-2 --resource-group kind(aws)"
           }
         }
       }
     }
   }

   stage("Service Account Token Authentication:KUBEADM(AZURE)"){
     steps{
       sh "chmod +x token.sh"
       sshagent(['kubeadm']){
         sh "scp -o StrictHostKeyChecking=no -q token.sh kubeadm@20.193.238.113:/home/kubeadm/"
         script{
           try{
             sh "ssh kubeadm@20.193.238.113 ./token.sh"
           }catch(error){
             sh "ssh kubeadm@20.193.238.113 ./token.sh"
           }
         }
       }
     }
   }

   stage("Service Account Token Authentication:KIND(AWS)"){
     steps{
       sh "chmod +x token.sh"
       sshagent(['kind']){
         sh "scp -o StrictHostKeyChecking=no -q token.sh ubuntu@3.111.23.250:/home/ubuntu/"
         script{
           try{
             sh "ssh ubuntu@3.111.23.250 ./token.sh"
           }catch(error){
             sh "ssh ubuntu@3.111.23.250 ./token.sh"
           }
         }
       }
     }
   }

   stage('Deploy Opensips:KUBEADM(AZURE) ') {
      steps {
        sshagent(['kubeadm']) {
          script {
            try {
              sh "scp -o StrictHostKeyChecking=no -q opensips.yaml kubeadm@20.193.238.113:/home/kubeadm/"
              sh "sleep 2"
              sh "ssh kubeadm@20.193.238.113 kubectl apply -f opensips.yaml"
            }catch(error){
              sh "scp -o StrictHostKeyChecking=no -q opensips.yaml kubeadm@20.193.238.113:/home/kubeadm/"
              sh "sleep 2"
              sh "ssh kubeadm@20.193.238.113 kubectl apply -f opensips.yaml"
            }
          }
        }
      }
    }
    stage('Validate Opensips:KUBEADM(AZURE)') {
      steps {
        sh "chmod +x configure.sh"
        sshagent(['kubeadm']) {
          sh "scp -o StrictHostKeyChecking=no -q configure.sh kubeadm@20.193.238.113:/home/kubeadm"
          script {
            sh "sleep 10"
            sh "ssh kubeadm@20.193.238.113 ./configure.sh"
          }
        }
      }
    }
   stage('Deploy Opensips:KIND(AWS)') {
      steps {
        sshagent(['kind']) {
          script {
            try {
              sh "scp -o StrictHostKeyChecking=no -q opensips.yaml ubuntu@3.111.23.250:/home/ubuntu/"
              sh "sleep 2"
              sh "ssh ubuntu@3.111.23.250 kubectl apply -f opensips.yaml"
            }catch(error){
              sh "scp -o StrictHostKeyChecking=no -q opensips.yaml ubuntu@3.111.23.250:/home/ubuntu/"
              sh "sleep 2"
              sh "ssh ubuntu@3.111.23.250 kubectl apply -f opensips.yaml"
            }
          }
        }
      }
    }

   stage('Validate Opensips:KIND(AWS)') {
      steps {
        sh "chmod +x configure.sh"
        sshagent(['kind']) {
          sh "scp -o StrictHostKeyChecking=no -q configure.sh ubuntu@3.111.23.250:/home/ubuntu"
          script {
            sh "sleep 10"
            sh "ssh ubuntu@3.111.23.250 ./configure.sh"
          }
        }
      }
    }
  }
}
